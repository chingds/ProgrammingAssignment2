search()
install.packages("devtools")
find_rtools()
find_rtools()
library(devtools)
find_rtools()
find_ggplot2()
install.packages("slidify")
q()
install_github("slidify","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv/slidigy")
install_github("slidifyLibraries","ramnathv/slidify")
library(ggplot2)
search()
install_github("slidifyLibraries","ramnathv/slidify/slidifyLibraries")
install.packages("KernSmooth")
library(KernSmooth)
q()
3
3+5
5/2
1 + 3
1 + 4
my_dogs <- 5
num_vector <- c(2,4,5)
week_1_hrs = c(1,2,3,4,5)
week_2hrs + c(3,4,5,6,7)
week_2_hrs = c(3,4,5,6,7)
week_2_hrs
total_hrs <- week_1_hrs + week_2_hrs
total_hrs
71/3
x <- 4L
class(x)
x<-c(4,TRUE)
class(x)
y <- c(3, 2, 10)
x <- c(1,3, 5)
cbind(x,y)
x <- list(2, "a", "b", TRUE
x <- list(2, "a", "b", TRUE)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x
x[x > 10] <- 4
x
getwd()
rm(list=ls())
ls()
q90
q()
library(datasets)
data(mtcars)
abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$hp, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(209.21429-82.63636)
setwd("~/2016_work/DataScientiest_Coursera/Class2_R/Week3")
rm(list=ls())
source("example.R")
makevector(c(2,3,4,5))
makeVector(c(2,3,4,5))
cachemean(x)
a <- makeVector(c(2,3,4,5))
a$get()
a$get
a$getmean
setmean()
a$setmean
a$setmean()
str(makeVector(c(2,3,4)))
a$getmean()
a$setmean()
a$get()
str(a$get)
str(a$get())
cachemean(a)
str(a$get())
a$setmean()
a$getmean()
a$set(c(10, 20, 30, 30))
a$getmean()
cachemean(a)
list()
list(a)
makeCacheMatrix <-(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- ginv(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix <-(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
rm(list=ls())
makeCacheMatrix <-(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix <-(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <-function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
rm(list=ls())
setwd("C:/Users/Mommy/assignment2_repo/ProgrammingAssignment2")
source("cachematrix.R"")
""
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
q()
